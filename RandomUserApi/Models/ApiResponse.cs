// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RandomUserApi.Models;
//
//    var apiResponse = ApiResponse.FromJson(jsonString);

namespace RandomUserApi.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public  class ApiResponse
    {
        [JsonProperty("results", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public User[] Users { get; set; }

        [JsonProperty("info", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Info Info { get; set; }

        [JsonProperty("error", NullValueHandling = NullValueHandling.Ignore)]
        public string Error { get; set; }

        public static ApiResponse FromJson(string json) => JsonConvert.DeserializeObject<ApiResponse>(json, RandomUserApi.Models.Converter.Settings);
    }

    public  class Info
    {
        [JsonProperty("seed", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Seed { get; set; }

        [JsonProperty("results", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int? Results { get; set; }

        [JsonProperty("page", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int? Page { get; set; }

        [JsonProperty("version", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Version { get; set; }
    }

    public  class User
    {
     

        [JsonProperty("gender", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Gender { get; set; }

        [JsonProperty("name", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Name Name { get; set; }

        [JsonProperty("location", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [JsonProperty("email", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Email { get; set; }

        [JsonProperty("login", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Login Login { get; set; }

        [JsonProperty("dob", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Dob Dob { get; set; }

        [JsonProperty("registered", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Dob Registered { get; set; }

        [JsonProperty("phone", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [JsonProperty("cell", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Cell { get; set; }

        [JsonProperty("id", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Id Id { get; set; }

        [JsonProperty("picture", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Picture Picture { get; set; }

        [JsonProperty("nat", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Nat { get; set; }
    }

    public  class Dob
    {
        [JsonProperty("date", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Date { get; set; }

        [JsonProperty("age", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int? Age { get; set; }
    }

    public  class Id
    {
        [JsonProperty("name", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("value", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Value { get; set; }
    }

    public  class Location
    {
        [JsonProperty("street", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Street Street { get; set; }

        [JsonProperty("city", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("state", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }

        [JsonProperty("country", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("postcode", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Postcode { get; set; }

        [JsonProperty("coordinates", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Coordinates Coordinates { get; set; }

        [JsonProperty("timezone", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Timezone Timezone { get; set; }
    }

    public  class Coordinates
    {
        [JsonProperty("latitude", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Latitude { get; set; }

        [JsonProperty("longitude", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Longitude { get; set; }
    }

    public  class Street
    {
        [JsonProperty("number", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public int? Number { get; set; }

        [JsonProperty("name", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public  class Timezone
    {
        [JsonProperty("offset", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Offset { get; set; }

        [JsonProperty("description", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public  class Login
    {
        [JsonProperty("uuid", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Uuid { get; set; }

        [JsonProperty("username", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Username { get; set; }

        [JsonProperty("password", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

        [JsonProperty("salt", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Salt { get; set; }

        [JsonProperty("md5", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Md5 { get; set; }

        [JsonProperty("sha1", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Sha1 { get; set; }

        [JsonProperty("sha256", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Sha256 { get; set; }
    }

    public  class Name
    {
        [JsonProperty("title", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("first", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string First { get; set; }

        [JsonProperty("last", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Last { get; set; }
    }

    public  class Picture
    {
        [JsonProperty("large", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Uri Large { get; set; }

        [JsonProperty("medium", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Uri Medium { get; set; }

        [JsonProperty("thumbnail", Required = Required.AllowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Uri Thumbnail { get; set; }
    }

    

    public static class Serialize
    {
        public static string ToJson(this ApiResponse self) => JsonConvert.SerializeObject(self, RandomUserApi.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(int) || t == typeof(int?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            int l;
            if (Int32.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type int");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Int32)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
